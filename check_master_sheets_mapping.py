#!/usr/bin/env python
"""
V√©rification des mappings des feuilles ma√Ætresses
"""

import os
import sys
import django
from datetime import datetime, date

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fr_backend.settings')
django.setup()

from api.reports.models import AccountData
from api.reports.tft_generator import generate_tft_and_sheets_from_database

def check_master_sheets_mapping():
    """V√©rifie les mappings des feuilles ma√Ætresses"""
    
    print("üîç V√âRIFICATION DES MAPPINGS DES FEUILLES MA√éTRESSES")
    print("=" * 70)
    
    # R√©cup√©rer un financial_report_id pour test
    financial_report_ids = AccountData.objects.values_list('financial_report_id', flat=True).distinct()
    financial_report_ids = [fid for fid in financial_report_ids if fid]
    
    if not financial_report_ids:
        print("‚ùå Aucune donn√©e disponible")
        return
    
    financial_report_id = financial_report_ids[0]
    
    # D√©terminer les dates
    account_data = AccountData.objects.filter(financial_report_id=financial_report_id)
    exercices = set()
    for data in account_data:
        exercices.add(data.created_at.year)
    
    exercices = sorted(exercices)
    
    if len(exercices) >= 2:
        n_1 = exercices[-2]
        n = exercices[-1]
        start_date = date(n_1, 1, 1)
        end_date = date(n, 12, 31)
    elif len(exercices) == 1:
        n = exercices[0]
        start_date = date(n, 1, 1)
        end_date = date(n, 12, 31)
    else:
        print("‚ùå Aucun exercice d√©tect√©")
        return
    
    print(f"üìÖ P√©riode: {start_date} √† {end_date}")
    
    # G√©n√©rer le TFT et les feuilles ma√Ætresses
    try:
        tft_content, sheets_contents, tft_data, sheets_data, coherence = generate_tft_and_sheets_from_database(
            financial_report_id, start_date, end_date
        )
        
        print(f"‚úÖ TFT et feuilles ma√Ætresses g√©n√©r√©s avec succ√®s")
        
        # D√©finir les groupes de feuilles ma√Ætresses
        groups = {
            'financier': ['501', '502', '503', '504', '505', '506', '521', '522', '523', '524', '531', '532', '533', '541', '542', '58', '59'],
            'Clients-Ventes': ['411', '416', '417', '418', '419', '491', '701', '702', '703', '704', '705', '706', '707', '708', '781'],
            'Fournisseurs-Achats': ['401', '402', '403', '408', '409', '419', '601', '602', '603', '604', '605', '606', '607', '608'],
            'personnel': ['421', '422', '423', '424', '425', '43', '447', '661', '662', '663', '664', '665', '666', '667', '668'],
            'Impots-Taxes': ['441', '442', '443', '444', '445', '446', '447', '448', '449', '631', '633', '635', '695'],
            'Immobilisations Corporelles - Incorporelles': ['201', '203', '204', '205', '208', '211', '212', '213', '214', '215', '218', '237', '238'],
            'immobilisations_financieres': ['251', '256', '261', '262', '264', '265', '266', '267', '268', '269', '274', '275'],
            'stocks': ['311', '321', '322', '323', '331', '335', '341', '345', '351', '358', '39'],
            'capitaux_propres': ['101', '103', '104', '105', '106', '108', '109', '110', '130', '131'],
            'Provisions R-C': ['141', '142', '143', '148', '149'],
        }
        
        # Analyser chaque groupe de feuilles ma√Ætresses
        print(f"\nüìã ANALYSE DES FEUILLES MA√éTRESSES:")
        print("=" * 50)
        
        total_groups = len(groups)
        groups_with_data = 0
        groups_empty = 0
        groups_problematic = 0
        
        for group_name, prefixes in groups.items():
            print(f"\nüîç Groupe: {group_name}")
            print(f"   Pr√©fixes configur√©s: {prefixes}")
            
            # V√©rifier si le groupe a des donn√©es
            if group_name in sheets_contents and sheets_contents[group_name]:
                content_size = len(sheets_contents[group_name])
                print(f"   ‚úÖ Contenu g√©n√©r√©: {content_size} bytes")
                
                # V√©rifier les donn√©es du groupe
                if group_name in sheets_data and sheets_data[group_name]:
                    group_data = sheets_data[group_name]
                    if isinstance(group_data, list) and len(group_data) > 0:
                        print(f"   ‚úÖ Donn√©es trouv√©es: {len(group_data)} comptes")
                        groups_with_data += 1
                        
                        # Afficher quelques exemples de comptes
                        print(f"   üìä Exemples de comptes:")
                        for i, compte in enumerate(group_data[:3]):
                            if isinstance(compte, dict):
                                account_num = compte.get('account_number', 'N/A')
                                balance = compte.get('balance', 0)
                                print(f"      {account_num}: {balance:,.2f}")
                    else:
                        print(f"   ‚ö†Ô∏è  Donn√©es vides ou incorrectes")
                        groups_empty += 1
                else:
                    print(f"   ‚ö†Ô∏è  Pas de donn√©es structur√©es")
                    groups_empty += 1
            else:
                print(f"   ‚ùå Aucun contenu g√©n√©r√©")
                groups_problematic += 1
        
        # Analyser les mappings sp√©cifiques
        print(f"\nüîç ANALYSE D√âTAILL√âE DES MAPPINGS:")
        print("=" * 50)
        
        # V√©rifier chaque groupe individuellement
        for group_name, prefixes in groups.items():
            print(f"\nüìä {group_name.upper()}:")
            
            # Compter les comptes correspondants dans les donn√©es
            matching_accounts = 0
            total_balance = 0
            
            for prefix in prefixes:
                # Rechercher les comptes correspondants
                accounts = AccountData.objects.filter(
                    financial_report_id=financial_report_id,
                    created_at__year=exercices[-1]  # N
                ).filter(
                    account_number__startswith=prefix
                )
                
                count = accounts.count()
                balance = sum(float(acc.balance) for acc in accounts)
                
                matching_accounts += count
                total_balance += balance
                
                if count > 0:
                    print(f"   ‚úÖ Pr√©fixe {prefix}: {count} comptes, {balance:,.2f}")
                else:
                    print(f"   ‚ùå Pr√©fixe {prefix}: Aucun compte trouv√©")
            
            print(f"   üìä Total: {matching_accounts} comptes, {total_balance:,.2f}")
            
            if matching_accounts > 0:
                print(f"   ‚úÖ Mapping fonctionnel")
            else:
                print(f"   ‚ùå Mapping non fonctionnel")
        
        # R√©sum√© final
        print(f"\nüìä R√âSUM√â DES FEUILLES MA√éTRESSES:")
        print("=" * 50)
        print(f"   Total des groupes: {total_groups}")
        print(f"   Groupes avec donn√©es: {groups_with_data}")
        print(f"   Groupes vides: {groups_empty}")
        print(f"   Groupes probl√©matiques: {groups_problematic}")
        
        # Calculer le pourcentage de r√©ussite
        pourcentage_reussite = (groups_with_data / total_groups) * 100
        
        print(f"\nüéØ TAUX DE R√âUSSITE DES FEUILLES MA√éTRESSES: {pourcentage_reussite:.1f}%")
        
        if pourcentage_reussite >= 100:
            print("   üéâ PARFAIT ! Toutes les feuilles ma√Ætresses sont correctement mapp√©es !")
        elif pourcentage_reussite >= 90:
            print("   ‚úÖ EXCELLENT ! Presque toutes les feuilles ma√Ætresses sont correctement mapp√©es !")
        elif pourcentage_reussite >= 80:
            print("   ‚úÖ TR√àS BON ! La plupart des feuilles ma√Ætresses sont correctement mapp√©es !")
        elif pourcentage_reussite >= 70:
            print("   ‚úÖ BON ! Taux de r√©ussite acceptable pour les feuilles ma√Ætresses !")
        else:
            print("   ‚ö†Ô∏è  MOYEN ! Des am√©liorations sont n√©cessaires pour les feuilles ma√Ætresses !")
        
        return pourcentage_reussite
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la g√©n√©ration des feuilles ma√Ætresses: {str(e)}")
        import traceback
        traceback.print_exc()
        return 0

def suggest_master_sheets_improvements():
    """Sugg√®re des am√©liorations pour les feuilles ma√Ætresses"""
    
    print(f"\nüí° SUGGESTIONS D'AM√âLIORATION:")
    print("=" * 50)
    
    # D√©finir les groupes pour l'analyse
    groups = {
        'financier': ['501', '502', '503', '504', '505', '506', '521', '522', '523', '524', '531', '532', '533', '541', '542', '58', '59'],
        'Clients-Ventes': ['411', '416', '417', '418', '419', '491', '701', '702', '703', '704', '705', '706', '707', '708', '781'],
        'Fournisseurs-Achats': ['401', '402', '403', '408', '409', '419', '601', '602', '603', '604', '605', '606', '607', '608'],
        'personnel': ['421', '422', '423', '424', '425', '43', '447', '661', '662', '663', '664', '665', '666', '667', '668'],
        'Impots-Taxes': ['441', '442', '443', '444', '445', '446', '447', '448', '449', '631', '633', '635', '695'],
        'Immobilisations Corporelles - Incorporelles': ['201', '203', '204', '205', '208', '211', '212', '213', '214', '215', '218', '237', '238'],
        'immobilisations_financieres': ['251', '256', '261', '262', '264', '265', '266', '267', '268', '269', '274', '275'],
        'stocks': ['311', '321', '322', '323', '331', '335', '341', '345', '351', '358', '39'],
        'capitaux_propres': ['101', '103', '104', '105', '106', '108', '109', '110', '130', '131'],
        'Provisions R-C': ['141', '142', '143', '148', '149'],
    }
    
    # Analyser les groupes existants
    print("üìã Groupes existants:")
    for group_name, prefixes in groups.items():
        print(f"   - {group_name}: {prefixes}")
    
    # Sugg√©rer des am√©liorations bas√©es sur les donn√©es r√©elles
    print(f"\nüîß Am√©liorations sugg√©r√©es:")
    print("1. V√©rifier que tous les pr√©fixes correspondent aux comptes r√©els")
    print("2. Ajouter des pr√©fixes manquants pour les comptes non mapp√©s")
    print("3. Optimiser les groupes pour une meilleure organisation")
    print("4. V√©rifier la coh√©rence des calculs dans chaque groupe")

def main():
    """Fonction principale"""
    print("üîç V√âRIFICATION COMPL√àTE DES FEUILLES MA√éTRESSES")
    print("=" * 70)
    
    score = check_master_sheets_mapping()
    suggest_master_sheets_improvements()
    
    print(f"\nüéâ R√âSULTAT FINAL:")
    if score >= 100:
        print("   üéâ PARFAIT ! Toutes les feuilles ma√Ætresses sont correctement mapp√©es !")
        print("   Le syst√®me est enti√®rement fonctionnel !")
    elif score >= 90:
        print("   ‚úÖ EXCELLENT ! Presque toutes les feuilles ma√Ætresses sont correctement mapp√©es !")
        print("   Quelques ajustements mineurs pourraient √™tre n√©cessaires.")
    else:
        print("   ‚ö†Ô∏è  Des corrections suppl√©mentaires sont n√©cessaires.")
        print("   Consultez les groupes probl√©matiques ci-dessus.")

if __name__ == "__main__":
    main()

#!/usr/bin/env python
"""
Diagnostic simple des obstacles √† l'exploitation des donn√©es
"""

import os
import sys
import django
from datetime import datetime, date

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'fr_backend.settings')
django.setup()

from api.reports.models import AccountData, BalanceUpload, GeneratedFile

def main():
    """Diagnostic simple"""
    
    print("üîç DIAGNOSTIC SIMPLE - OBSTACLES √Ä L'EXPLOITATION")
    print("=" * 60)
    
    # 1. V√©rifier les donn√©es de base
    print("üìä DONN√âES DE BASE:")
    total_accounts = AccountData.objects.count()
    print(f"   Total enregistrements: {total_accounts}")
    
    if total_accounts == 0:
        print("‚ùå PROBL√àME MAJEUR: Aucune donn√©e")
        return
    
    # 2. V√©rifier les financial_report_ids
    financial_report_ids = AccountData.objects.values_list('financial_report_id', flat=True).distinct()
    financial_report_ids = [fid for fid in financial_report_ids if fid]
    print(f"   Financial Report IDs: {len(financial_report_ids)}")
    
    # 3. V√©rifier les exercices
    exercices = set()
    for data in AccountData.objects.all()[:1000]:  # √âchantillon
        exercices.add(data.created_at.year)
    
    exercices = sorted(exercices)
    print(f"   Exercices: {exercices}")
    
    # 4. V√©rifier les types de donn√©es
    print(f"\nüîç TYPES DE DONN√âES:")
    sample = AccountData.objects.first()
    if sample:
        print(f"   account_number: {type(sample.account_number)}")
        print(f"   balance: {type(sample.balance)}")
        print(f"   total_debit: {type(sample.total_debit)}")
        print(f"   total_credit: {type(sample.total_credit)}")
        print(f"   created_at: {type(sample.created_at)}")
    
    # 5. V√©rifier les soldes
    print(f"\nüìä SOLDES:")
    positive = AccountData.objects.filter(balance__gt=0).count()
    negative = AccountData.objects.filter(balance__lt=0).count()
    zero = AccountData.objects.filter(balance=0).count()
    
    print(f"   Positifs: {positive}")
    print(f"   N√©gatifs: {negative}")
    print(f"   Z√©ro: {zero}")
    
    # 6. V√©rifier les comptes uniques
    unique_accounts = AccountData.objects.values_list('account_number', flat=True).distinct().count()
    print(f"   Comptes uniques: {unique_accounts}")
    
    # 7. V√©rifier les probl√®mes potentiels
    print(f"\n‚ö†Ô∏è  PROBL√àMES POTENTIELS:")
    
    # V√©rifier les comptes avec des num√©ros bizarres
    weird_accounts = AccountData.objects.exclude(account_number__regex=r'^[0-9]+$').count()
    if weird_accounts > 0:
        print(f"   ‚ùå Comptes avec num√©ros non-num√©riques: {weird_accounts}")
    
    # V√©rifier les soldes extr√™mes
    extreme_balances = AccountData.objects.filter(
        balance__gt=1000000
    ).count()
    if extreme_balances > 0:
        print(f"   ‚ö†Ô∏è  Comptes avec soldes > 1M: {extreme_balances}")
    
    # V√©rifier les dates
    future_dates = AccountData.objects.filter(created_at__gt=datetime.now()).count()
    if future_dates > 0:
        print(f"   ‚ö†Ô∏è  Dates futures: {future_dates}")
    
    # 8. V√©rifier les mappings
    print(f"\nüó∫Ô∏è  MAPPINGS:")
    
    # Comptes SYSCOHADA principaux
    syscohada_main = ['101', '401', '411', '501', '521', '601', '701']
    mapped_count = 0
    
    for account in syscohada_main:
        if AccountData.objects.filter(account_number=account).exists():
            mapped_count += 1
            print(f"   ‚úÖ {account}: Pr√©sent")
        else:
            print(f"   ‚ùå {account}: Absent")
    
    print(f"   Score mapping: {mapped_count}/{len(syscohada_main)}")
    
    # 9. Recommandations
    print(f"\nüí° RECOMMANDATIONS:")
    
    if weird_accounts > 0:
        print("   - Nettoyer les num√©ros de comptes non-num√©riques")
    
    if mapped_count < len(syscohada_main) * 0.5:
        print("   - V√©rifier la structure du plan comptable")
    
    if unique_accounts < 100:
        print("   - V√©rifier la diversit√© des comptes")
    
    print("   - V√©rifier la coh√©rence des exercices")
    print("   - S'assurer que les soldes sont corrects")
    
    print(f"\nüéØ CONCLUSION:")
    if total_accounts > 0 and len(financial_report_ids) > 0 and len(exercices) > 0:
        print("‚úÖ Les donn√©es de base sont pr√©sentes et exploitables")
        print("‚ö†Ô∏è  V√©rifiez les mappings et la coh√©rence des calculs")
    else:
        print("‚ùå Probl√®mes majeurs d√©tect√©s - donn√©es non exploitables")

if __name__ == "__main__":
    main()
